#include "bang.h"
#include "bang_device_functions.h"
#include "cnrt.h"
#include "random_sample_bang.h"
#include "../../../devices/bang/common_bang.h"
#include <stdlib.h>

const int SRC_MAX_SIZE = 1024 * 32;
__nram__  char nram_buffer[NRAM_MAX_SIZE];
template <typename T>
__mlu_global__ void random_sampleX(T const *source, uint64_t *indices, uint64_t *indGdram, T *globalTopk, T *globalSum, float random_val, float topp, int topk, float temperature, int voc){
    const int maxNum = SRC_MAX_SIZE/sizeof(T);
    int wSize = 128 / sizeof(T);
    int segNum = maxNum / wSize;

    T temInv = 1.0 / static_cast<T>(temperature);

    int remainT = voc % taskDim;
    int stepEasy = (voc - remainT) / taskDim;
    int stepHard = stepEasy + 1;
    int step = (taskId < remainT ? stepHard : stepEasy);
    int indStart = (taskId < remainT ? taskId * stepHard : remainT * stepHard + (taskId - remainT) * stepEasy);

    char *nram_bufferInd = nram_buffer + (2 * maxNum + wSize + taskDim * topk) * sizeof(T);
    uint64_t *srcInd = (uint64_t *)nram_bufferInd;//[maxNum],必须要求maxNum >= max{step, topk}
    uint64_t *indGlobal = srcInd + maxNum;//[taskDim * topk]

    __sync_all();

    T *src = (T *)nram_buffer;//[maxNum],必须要求maxNum >= max{step, topk}
    T *destSum = src + maxNum;//[maxNum]
    T *destSumFinal = destSum + maxNum;//[wSize]
    T *srcGlobal = destSumFinal + wSize;//[taskDim * topk]
    __bang_write_value(src, maxNum, -INFINITY);
    __bang_write_zero(destSum, maxNum);
    __bang_write_zero(destSumFinal, wSize);

    __memcpy(srcInd, indGdram, voc * sizeof(uint64_t), GDRAM2NRAM);

    if(step){
        for(int i = 0; i < step; i++){
            srcInd[i] = indStart + i;
        }
        __memcpy(src, source + indStart, step * sizeof(T), GDRAM2NRAM);
        if(step >= topk){
            for(int i = 0; i < topk; i++){
                for(int j = i + 1; j < step; j++){
                    if(src[i] < src[j]){
                        T tmp = src[i];
                        src[i] = src[j];
                        src[j] = tmp;

                        uint64_t indexTmp = srcInd[i];
                        srcInd[i] = srcInd[j];
                        srcInd[j] = indexTmp;
                    }
                }
            }
        }
        else{
            for(int i = step; i < topk; i++){
                src[i] = -INFINITY;
                srcInd[i] = -1;
            }
        }
        __memcpy(globalTopk + taskId * topk, src, topk * sizeof(T), NRAM2GDRAM);
        __memcpy(indGdram + taskId * topk, srcInd, topk * sizeof(uint64_t), NRAM2GDRAM);
        __sync_all();
    }
    if(taskId == 0){
        __memcpy(srcGlobal, globalTopk, taskDim * topk * sizeof(T), GDRAM2NRAM);
        __memcpy(indGlobal, indGdram, taskDim * topk * sizeof(uint64_t), GDRAM2NRAM);
        for(int i = 0; i < topk; i++){
            for(int j = i + 1; j < taskDim * topk; j++){
                if(srcGlobal[i] < srcGlobal[j]){
                    T tmpg = srcGlobal[i];
                    srcGlobal[i] = srcGlobal[j];
                    srcGlobal[j] = tmpg;

                    uint64_t indexTmpg = indGlobal[i];
                    indGlobal[i] = indGlobal[j];
                    indGlobal[j] = indexTmpg;
                }
            }
        }
        __memcpy(globalTopk, srcGlobal, taskDim * topk * sizeof(T), NRAM2GDRAM);
        __memcpy(indGdram, indGlobal, taskDim * topk * sizeof(uint64_t), NRAM2GDRAM);
    }
    __sync_all();
    T globalM = globalTopk[0];
    __bang_write_zero(destSum, maxNum);
    __bang_write_zero(destSumFinal, wSize);
    if(step){
        __bang_write_value(src, maxNum, globalM);
        __memcpy(src, source + indStart, step * sizeof(T), GDRAM2NRAM);
        __bang_sub_scalar(src, src, globalM, maxNum);
        __bang_mul_scalar(src, src, temInv, maxNum);
        __bang_active_exp_less_0(src, src, maxNum);
        __bang_add(destSum, destSum, src, maxNum);
    }
    if(maxNum >= wSize){
        for(int strip = segNum/2; strip > 0; strip = strip / 2){//segNum要求是2的幂次即maxNum必须选取2的幂次
            for(int i = 0; i < strip ; i++){
                __bang_add(destSum + i * wSize, destSum + i * wSize, destSum + (i + strip) * wSize, wSize);
            }
        }

        __bang_reduce_sum(destSumFinal, destSum, wSize);
    }
    else{
        for(int i = 0; i < maxNum; i++){
            destSumFinal[0] += destSum[i];
        }
    }
    if(step){
        destSumFinal[0] = destSumFinal[0] - (maxNum - step);//把上面多加的(maxNum - step)减掉
    }
    globalSum[0] = 0.0;

    __sync_all();
    __bang_atomic_add(destSumFinal, globalSum, destSumFinal, 1);//globalSum[0]必须初始化为0

    T globalSumInv = 1.0 / globalSum[0];//计算出全局数值和

    if(taskId == 0){
        __memcpy(srcGlobal, globalTopk, topk * sizeof(T), GDRAM2NRAM);//前topk个元素就是前k个最大值


        __bang_sub_scalar(srcGlobal, srcGlobal, globalM, topk);
        __bang_mul_scalar(srcGlobal, srcGlobal, temInv, topk);
        __bang_active_exp_less_0(srcGlobal, srcGlobal, topk);
        __bang_mul_scalar(srcGlobal, srcGlobal, globalSumInv, topk);

        __bang_write_zero(destSum, 2 * topk);
        destSum[0] = srcGlobal[0];
        for(int i = 1; i < topk; i++){
            destSum[i] = destSum[i - 1] + srcGlobal[i];
        }

        int end = 0;
        for(end = 0; end < topk; end++){
            if(destSum[end] >= static_cast<T>(topp)){
                break;
            }
        }
        if(end < topk - 1){
            end += 1;
        }
        else{
            end = topk;
        }

        random_val *= destSum[end - 1];
        for(int i = 0; i < end; i++){
            if(random_val < destSum[i]){
                indices[0] = indGdram[i];
                break;
            }
        }
        __memcpy(globalTopk, srcGlobal, topk * sizeof(T), NRAM2GDRAM);
    }
}

template <typename T>
__mlu_global__ void random_sampleD(T const *source, uint64_t *indices, uint64_t *indGdram, T *globalTopk, T *globalSum, float random_val, float topp, int topk, float temperature, int voc){
    const int maxNum = SRC_MAX_SIZE/sizeof(T);

    int wSize = 128 / sizeof(T);
    int segNum = maxNum / wSize;

    T temInv = 1.0 / static_cast<T>(temperature);
    int taskSize = taskDim * maxNum;
    int remain = voc % taskSize;
    int repeat = (voc - remain) / taskSize;

    int remainT = remain % taskDim;
    int stepEasy = (remain - remainT) / taskDim;
    int stepHard = stepEasy + 1;
    int step = (taskId < remainT ? stepHard : stepEasy);
    int indStart = (taskId < remainT ? taskId * stepHard : remainT * stepHard + (taskId - remainT) * stepEasy);

    char *nram_bufferInd = nram_buffer + (2 * maxNum + wSize + 2 * topk + taskDim * topk) * sizeof(T);
    uint64_t *srcInd = (uint64_t *)nram_bufferInd;//[maxNum]
    uint64_t *topkInd = srcInd + maxNum;//[2 * topk]
    uint64_t *indGlobal = topkInd + 2 * topk;
    __bang_write_zero(topkInd, 2 * topk);

    T *src = (T *)nram_buffer;//[maxNum]
    T *srcTopk = src + maxNum;//[2 * topk]
    T *destSum = srcTopk + 2 * topk;//[maxNum]
    T *destSumFinal = destSum + maxNum;//[wSize]
    T *srcGlobal = destSumFinal + wSize;//[taskDim * topk]
    __bang_write_value(srcTopk, 2 * topk, -INFINITY);
    for(int r = 0; r < repeat; r++){
        for(int j = 0; j < maxNum; j++){
            srcInd[j] = r * taskSize + taskId * maxNum + j;
        }
        __memcpy(src, source + r * taskSize + taskId * maxNum, maxNum * sizeof(T), GDRAM2NRAM);
        for(int i = 0; i < topk; i++){
            for(int j = i + 1; j < maxNum; j++){
                if(src[i] < src[j]){
                    T tmp = src[i];
                    src[i] = src[j];
                    src[j] = tmp;

                    uint64_t indexTmp = srcInd[i];
                    srcInd[i] = srcInd[j];
                    srcInd[j] = indexTmp;
                }
            }
            srcTopk[topk + i] = src[i];
            topkInd[topk + i] = srcInd[i];
        }
        if(r == 0){
            __memcpy(srcTopk, srcTopk + topk, topk * sizeof(T), NRAM2NRAM);
            __memcpy(topkInd, topkInd + topk, topk * sizeof(uint64_t), NRAM2NRAM);
        }
        else{
            for(int i = 0; i < topk; i++){
                for(int j = i + 1; j < 2 * topk; j++){
                    if(srcTopk[i] < srcTopk[j]){
                        T tmpk = srcTopk[i];
                        srcTopk[i] = srcTopk[j];
                        srcTopk[j] = tmpk;

                        uint64_t indexTmpk = topkInd[i];
                        topkInd[i] = topkInd[j];
                        topkInd[j] = indexTmpk;
                    }
                }
            }
        }


    }

    if(step){
        for(int j = 0; j < step; j++){
            srcInd[j] = repeat * taskSize + indStart + j;
        }
        __memcpy(src, source + repeat * taskSize + indStart, step * sizeof(T), GDRAM2NRAM);
        if(step >= topk){
            for(int i = 0; i < topk; i++){
                for(int j = i + 1; j < step; j++){
                    if(src[i] < src[j]){
                        T tmp = src[i];
                        src[i] = src[j];
                        src[j] = tmp;

                        uint64_t indexTmp = srcInd[i];
                        srcInd[i] = srcInd[j];
                        srcInd[j] = indexTmp;
                    }
                }
                srcTopk[topk + i] = src[i];
                topkInd[topk + i] = srcInd[i];
            }
            for(int i = 0; i < topk; i++){
                for(int j = i + 1; j < 2 * topk; j++){
                    if(srcTopk[i] < srcTopk[j]){
                        T tmpk = srcTopk[i];
                        srcTopk[i] = srcTopk[j];
                        srcTopk[j] = tmpk;

                        uint64_t indexTmpk = topkInd[i];
                        topkInd[i] = topkInd[j];
                        topkInd[j] = indexTmpk;
                    }
                }
            }
        }
        else{
            for(int i = 0; i < step; i++){
                srcTopk[topk + i] = src[i];
                topkInd[topk + i] = srcInd[i];
            }
            for(int i = 0; i < topk; i++){
                for(int j = i + 1; j < 2 * topk; j++){
                    if(srcTopk[i] < srcTopk[j]){
                        T tmpk = srcTopk[i];
                        srcTopk[i] = srcTopk[j];
                        srcTopk[j] = tmpk;

                        uint64_t indexTmpk = topkInd[i];
                        topkInd[i] = topkInd[j];
                        topkInd[j] = indexTmpk;
                    }
                }
            }
        }
    }

    __memcpy(globalTopk + taskId * topk, srcTopk, topk * sizeof(T), NRAM2GDRAM);
    __memcpy(indGdram + taskId * topk, topkInd, topk * sizeof(uint64_t), NRAM2GDRAM);
    __sync_all();

    if(taskId == 0){
        __memcpy(srcGlobal, globalTopk, taskDim * topk * sizeof(T), GDRAM2NRAM);
        __memcpy(indGlobal, indGdram, taskDim * topk * sizeof(uint64_t), GDRAM2NRAM);
        for(int i = 0; i < topk; i++){
            for(int j = i + 1; j < taskDim * topk; j++){
                if(srcGlobal[i] < srcGlobal[j]){
                    T tmpg = srcGlobal[i];
                    srcGlobal[i] = srcGlobal[j];
                    srcGlobal[j] = tmpg;

                    uint64_t indexTmpg = indGlobal[i];
                    indGlobal[i] = indGlobal[j];
                    indGlobal[j] = indexTmpg;
                }
            }
        }
        __memcpy(globalTopk, srcGlobal, taskDim * topk * sizeof(T), NRAM2GDRAM);
        __memcpy(indGdram, indGlobal, taskDim * topk * sizeof(uint64_t), NRAM2GDRAM);
    }
    __sync_all();
    //下面开始做类似于softmax变换
    T globalM = globalTopk[0];
    __bang_write_zero(destSum, maxNum);
    __bang_write_zero(destSumFinal, wSize);
    for(int r = 0; r < repeat; r++){
        __memcpy(src, source + r * taskSize + taskId * maxNum, maxNum * sizeof(T), GDRAM2NRAM);
        __bang_sub_scalar(src, src, globalM, maxNum);
        __bang_mul_scalar(src, src, temInv, maxNum);
        __bang_active_exp_less_0(src, src, maxNum);
        __bang_add(destSum, destSum, src, maxNum);
    }
    if(step){
        __bang_write_value(src, maxNum, globalM);
        __memcpy(src, source + repeat * taskSize + indStart, step * sizeof(T), GDRAM2NRAM);
        __bang_sub_scalar(src, src, globalM, maxNum);
        __bang_mul_scalar(src, src, temInv, maxNum);
        __bang_active_exp_less_0(src, src, maxNum);
        __bang_add(destSum, destSum, src, maxNum);
    }
    if(maxNum >= wSize){
        for(int strip = segNum/2; strip > 0; strip = strip / 2){//segNum要求是2的幂次即maxNum必须选取2的幂次
            for(int i = 0; i < strip ; i++){
                __bang_add(destSum + i * wSize, destSum + i * wSize, destSum + (i + strip) * wSize, wSize);
            }
        }

        __bang_reduce_sum(destSumFinal, destSum, wSize);
    }

    else{
        for(int i = 0; i < maxNum; i++){

            destSumFinal[0] += destSum[i];
        }

    }
    if(step){
        destSumFinal[0] = destSumFinal[0] - (maxNum - step);//把上面多加的(maxNum - step)减掉
    }
    globalSum[0] = 0.0;

    __sync_all();
    __bang_atomic_add(destSumFinal, globalSum, destSumFinal, 1);//globalSum[0]必须初始化为0

    T globalSumInv = 1.0 / globalSum[0];//计算出全局数值和

    if(taskId == 0){
        __memcpy(srcGlobal, globalTopk, topk * sizeof(T), GDRAM2NRAM);//前topk个元素就是前k个最大值


        __bang_sub_scalar(srcGlobal, srcGlobal, globalM, topk);
        __bang_mul_scalar(srcGlobal, srcGlobal, temInv, topk);
        __bang_active_exp_less_0(srcGlobal, srcGlobal, topk);
        __bang_mul_scalar(srcGlobal, srcGlobal, globalSumInv, topk);

        __bang_write_zero(srcTopk, 2 * topk);
        srcTopk[0] = srcGlobal[0];
        for(int i = 1; i < topk; i++){
            srcTopk[i] = srcTopk[i - 1] + srcGlobal[i];
        }

        int end = 0;
        for(end = 0; end < topk; end++){
            if(srcTopk[end] >= static_cast<T>(topp)){
                break;
            }
        }
        if(end < topk - 1){
            end += 1;
        }
        else{
            end = topk;
        }

        random_val *= srcTopk[end - 1];
        for(int i = 0; i < end; i++){
            if(random_val < srcTopk[i]){
                indices[0] = indGdram[i];
                break;
            }
        }
        __memcpy(globalTopk, srcGlobal, topk * sizeof(T), NRAM2GDRAM);
    }
}
template<typename T>
__mlu_global__ void random_sample(T const *source, uint64_t *indices, uint64_t *indGdram, int voc){
    const uint64_t maxNum = SRC_MAX_SIZE/sizeof(T);

    uint64_t taskSize = taskDim * maxNum;
    uint64_t remain = voc % taskSize;
    uint64_t repeat = (voc - remain) / taskSize;

    uint64_t remainT = remain % taskDim;
    uint64_t stepEasy = (remain - remainT) / taskDim;
    uint64_t stepHard = stepEasy + 1;
    uint64_t step = (taskId < remainT ? stepHard : stepEasy);
    uint64_t indStart = repeat * taskSize + (taskId < remainT ? taskId * stepHard : remainT * stepHard + (taskId - remainT) * stepEasy);

    T *src = (T *)nram_buffer;
    T *srcMax = src + maxNum;
    uint64_t index = 0;

    T newMax = -INFINITY;
    for(uint64_t r = 0; r < repeat; r++){
        __memcpy(src, source + r * taskSize + taskId * maxNum, maxNum * sizeof(T), GDRAM2NRAM);
        __bang_argmax(srcMax, src, maxNum);
        if(newMax < srcMax[0]){
            newMax = srcMax[0];
            index = r * taskSize + taskId * maxNum + *((int64_t*)&srcMax[1]);
        }

    }
    if(step){
        __bang_write_value(src, maxNum, -INFINITY);
        __memcpy(src, source + indStart, step * sizeof(T), GDRAM2NRAM);
        __bang_argmax(srcMax, src, maxNum);
        if(newMax < srcMax[0]){
            newMax = srcMax[0];
            index = indStart + *((int64_t*)&srcMax[1]);
        }

    }

    indGdram[taskId] = index;
    __sync_all();
    if(taskId == 0){
        uint64_t globalInd = indGdram[0];
        T globalM = source[globalInd];
        for(uint64_t id = 0; id < taskDim; id++){
            if(globalM < source[indGdram[id]]){
                globalM = source[indGdram[id]];
                globalInd = indGdram[id];
            }
        }
        indices[0] = globalInd;
    }
}
template<typename T>
void random_sampleUnion(cnrtQueue_t queue, void *workspace, void const *source, void *indices, float random_val, float topp, int topk, float temperature, int voc) {
    auto logits_ = reinterpret_cast<const T *>(source);
    auto index_ = reinterpret_cast<uint64_t *>(indices);
    cnrtDim3_t k_dim;
    cnrtFunctionType_t k_type;

    k_dim.x = 4;
    k_dim.y = 1;
    k_dim.z = 1;
    k_type = CNRT_FUNC_TYPE_UNION1;

    int taskNum = k_dim.x * k_dim.y * k_dim.z;
    if(topp > 0 && topk > 1){
        const int maxNum = SRC_MAX_SIZE/sizeof(T);
        char *origin = reinterpret_cast<char *>(workspace);
        char *indTmp = origin + taskNum * topk * sizeof(uint64_t);
        uint64_t *indGdram = (uint64_t *)origin;
        T *globalTopk = (T *)indTmp;
        T *globalSum = globalTopk + taskNum * topk;

        if(voc >= taskNum * maxNum){
            random_sampleD<T><<<k_dim, k_type, queue>>>(logits_, index_, indGdram, globalTopk, globalSum, random_val, topp, topk, temperature, voc);
        }
        else{
            random_sampleX<T><<<k_dim, k_type, queue>>>(logits_, index_, indGdram, globalTopk, globalSum, random_val, topp, topk, temperature, voc);
        }
    }
    else{
        uint64_t *indGdram = reinterpret_cast<uint64_t *>(workspace);
        random_sample<T><<<k_dim, k_type, queue>>>(logits_, index_, indGdram, voc);
    }
    cnrtQueueSync(queue);


}

void random_sample_bang_f16(RandomSampleBangDescriptor_t desc, void *workspace, void *result,
                                    void const *probs,
                                    float random_val,
                                    float topp,
                                    int topk,
                                    float temperature,
                                    void *stream) {
    auto queue = reinterpret_cast<cnrtQueue_t>(stream);
    int voc = desc->voc;

    random_sampleUnion<half>(queue, workspace, probs, result, random_val, topp, topk, temperature, voc);
}
infiniopStatus_t bangRandomSample(RandomSampleBangDescriptor_t desc,
                                    void *workspace,
                                    uint64_t workspace_size,
                                    void *result,
                                    void const *probs,
                                    float random_val,
                                    float topp,
                                    int topk,
                                    float temperature,
                                    void *stream) {
    if (cnrtSetDevice(desc->device_id) != cnrtSuccess) {
        return STATUS_BAD_DEVICE;
    }
    if (dtype_eq(desc->dtype, F16)) {
        random_sample_bang_f16(desc, workspace, result, probs, random_val, topp, topk, temperature, stream);
        return STATUS_SUCCESS;
    }
    return STATUS_BAD_TENSOR_DTYPE;
}
